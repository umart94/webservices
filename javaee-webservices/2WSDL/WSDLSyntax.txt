what formatting the computers use
wsdl is in xml format

compatible and ease of use.
hierarchy of tags.

some servers automatically generate a wsdl when we deploy a webservice.

the root tag is called definitions
it contains information about where and how each component of our web service are defined
most of these reference urls serve as something of a universal standard for defining tags like 

xsd
XSD (XML Schema Definition) is a World Wide Web Consortium (W3C) recommendation that specifies how to formally describe the elements in an Extensible Markup Language (XML) document.

Soap and so on..




the types tag contains schema for web service
import location should be port 8080


each message tag defines one possible transfer of data.
there are two message tags per method.

1 for input and 1 for response.

portType tag constructs an http url of the package, class and method identifiers of the method to be used by the program.

the binding tag lists the methods once again providing soap bindings

remote procedure call encoded
rpc literal
document encoded
document literal

since we do not have defined any encoding - document literal is default style of encoding.

<!--  Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.  -->
<!--  Generated by JAX-WS RI (https://github.com/eclipse-ee4j/metro-jax-ws). RI's version is Metro/2.4.3 (RELEASE-2.4.3-ad3323c; 2019-01-21T17:46:06+0000) JAXWS-RI/2.3.2 JAXWS-API/2.3.2 JAXB-RI/2.3.2 JAXB-API/2.3.2 git-revision#unknown.  -->
<definitions xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsp1_2="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://umartariq.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://umartariq.com/" name="HelloWorldService">
<types>
<xsd:schema>
<xsd:import namespace="http://umartariq.com/" schemaLocation="http://desktop-gn0170r:8080/HelloWorld/HelloWorldService?xsd=1"/>
</xsd:schema>
</types>
<message name="fibonacci">
<part name="parameters" element="tns:fibonacci"/>
</message>
<message name="fibonacciResponse">
<part name="parameters" element="tns:fibonacciResponse"/>
</message>
<message name="displayAString">
<part name="parameters" element="tns:displayAString"/>
</message>
<message name="displayAStringResponse">
<part name="parameters" element="tns:displayAStringResponse"/>
</message>
<portType name="HelloWorld">
<operation name="fibonacci">
<input wsam:Action="http://umartariq.com/HelloWorld/fibonacciRequest" message="tns:fibonacci"/>
<output wsam:Action="http://umartariq.com/HelloWorld/fibonacciResponse" message="tns:fibonacciResponse"/>
</operation>
<operation name="displayAString">
<input wsam:Action="http://umartariq.com/HelloWorld/displayAStringRequest" message="tns:displayAString"/>
<output wsam:Action="http://umartariq.com/HelloWorld/displayAStringResponse" message="tns:displayAStringResponse"/>
</operation>
</portType>
<binding name="HelloWorldPortBinding" type="tns:HelloWorld">
<soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
<operation name="fibonacci">
<soap:operation soapAction=""/>
<input>
<soap:body use="literal"/>
</input>
<output>
<soap:body use="literal"/>
</output>
</operation>
<operation name="displayAString">
<soap:operation soapAction=""/>
<input>
<soap:body use="literal"/>
</input>
<output>
<soap:body use="literal"/>
</output>
</operation>
</binding>
<service name="HelloWorldService">
<port name="HelloWorldPort" binding="tns:HelloWorldPortBinding">
<soap:address location="http://desktop-gn0170r:8080/HelloWorld/HelloWorldService"/>
</port>
</service>
</definitions>



the service tag gives the actual url where the service resides.
glassfish uses port nameofPC:8080

this wsdl can be typed manually or automatically generated.

-------------

The Problem is with Java version. The grizzly-npn-bootstrap-1.8.1.jar Jar is placed in bootclasspath, thats why it requires proper java version to start payara server. So remove unnecessary bootstrap jar from domain.xml.

In Windows:

1) Go To ---C:\Users\xxxx\payara5\glassfish\domains\domain1\config\domain.xml

2) According to my java verson(java version "1.8.0_191") I deleted the following lines from domain.xml. So delete according to your java version.

<jvm-options>[1.8.0|1.8.0u120]-Xbootclasspath/p:${com.sun.aas.installRoot}/lib/grizzly-npn-bootstrap-1.6.jar</jvm-options>
        <jvm-options>[1.8.0u121|1.8.0u160]-Xbootclasspath/p:${com.sun.aas.installRoot}/lib/grizzly-npn-bootstrap-1.7.jar</jvm-options>
        <jvm-options>[1.8.0u161|1.8.0u190]-Xbootclasspath/p:${com.sun.aas.installRoot}/lib/grizzly-npn-bootstrap-1.8.jar</jvm-options>
3) Remove this [1.8.0u191|1.8.0u500] part from jvm-options & Edit the line in your domain.xml(w.r.t java -version) as shown below

<jvm-options>-Xbootclasspath/p:${com.sun.aas.installRoot}/lib/grizzly-npn-bootstrap-1.8.1.jar</jvm-options>


or

delete the sun*. class files from grizzly-npn-bootstrap.jar file.




